
name: FastAPI Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/fastapi-backend

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort pytest pytest-cov

      - name: Lint with flake8
        run: flake8 app tests

      - name: Check formatting with black
        run: black --check app tests

      - name: Check imports with isort
        run: isort --check-only app tests

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage to GitHub summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  docker-build-push:
    needs: lint-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ steps.vars.outputs.SHORT_SHA }} .

      - name: Push Docker images
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ steps.vars.outputs.SHORT_SHA }}

      - name: Docker cleanup
        run: docker system prune -af

  # Optional: Deploy to Fly.io or Render (uncomment and configure as needed)
  # deploy:
  #   needs: docker-build-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to Fly.io
  #       uses: superfly/flyctl-actions@1.3
  #       with:
  #         args: "deploy --image $IMAGE_NAME:latest"
  #       env:
  #         FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
